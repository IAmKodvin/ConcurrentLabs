import java.util.concurrent.Semaphore;

import clock.ClockInput;
import clock.ClockInput.UserInput;
import clock.ClockOutput;
import emulator.AlarmClockEmulator;

class UpdateClock implements Runnable{
	Semaphore sem0;
	Semaphore sem1;
	ClockOutput out;
	BigData bigData;
	
	public UpdateClock(ClockOutput out, Semaphore sem1, Semaphore sem0) {
		this.sem0 = sem0;
		this.sem1 = sem1;
		this.out = out;
		this.bigData = new BigData();
		
	}
	
	private int convertTime(long time) {
		
		String h = Long.toString( (time / (1000*3600) + 2) % 24);
		String m = Long.toString((time % (1000*3600)) / (1000*60));
		String s = Long.toString((time % (1000*60)) / (1000));
		//System.out.println(h + ", " +  m + ", " + s);
		return Integer.parseInt(h + m + s);
	}
	
	public void run() {
		
		long nextStop = System.currentTimeMillis();
		try {
			while(true) {
				sem1.acquire();
				nextStop = nextStop + 1000;
				
				long now = System.currentTimeMillis();
				//System.out.println(now);
				bigData.updateDisplayTime();
				out.displayTime(bigData.getDisplayTime());
				
				Thread.sleep(nextStop - System.currentTimeMillis());
				sem1.release();
			}
		} catch (InterruptedException e) {
			System.out.println("Exception in thread: "+ e.getMessage());
		}
	}
}

public class ClockMain {

    public static void main(String[] args) throws InterruptedException {
        AlarmClockEmulator emulator = new AlarmClockEmulator();

        ClockInput  in  = emulator.getInput();
        ClockOutput out = emulator.getOutput();
        
        System.out.println(in);
        System.out.println(out);
        
        out.displayTime(150237);   // arbitrary time: just an example
       
        
        Semaphore sem0 = in.getSemaphore();
        Semaphore sem1 = new Semaphore(1);
        
        UpdateClock updateThread = new UpdateClock(out, sem1, sem0);
        Thread t = new Thread(updateThread);
        t.start();
        
        while (true) {
            sem0.acquire();                        // wait for user input

            UserInput userInput = in.getUserInput();
            int choice = userInput.getChoice();
            int value = userInput.getValue();
            
            
            switch (choice) {
            	// set time
            	case 1:
            		System.out.println("Set new time");
            		break;
            	//set new alarmtime
            	case 2:
            		System.out.println("new Alarm Time");
            		break;
            	// pressed both
            	case 3:
            		System.out.println("pressed both");
            		break;
            	// user pressed a button but did not change time
            	case 4:
            		System.out.println("no change");
            		break;
            }

            //System.out.println("choice = " + choice + "  value=" + value);
            System.out.println("");
        }
    }
}
