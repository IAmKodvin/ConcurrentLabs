import java.util.concurrent.Semaphore;
import clock.ClockOutput;


public class BigData {
	private long alarmTime;
	private int h;
	private int m;
	private int s;
	private int count;
	private boolean alarmOn;
	private Semaphore mutex;
	int currentTime;
	private ClockOutput out;
	
	
	public BigData(ClockOutput out) {
		this.h = 0;
		this.m = 0;
		this.s = 0;
		this.count = 0;
		this.alarmTime = 000000;
		this.alarmOn = false;
		this.mutex = new Semaphore(1);
		this.out = out;
	}
	
	public int getDisplayTime() {
		return h*10000 + m*100 + s;
	}
	
	public void setDisplayTime(int newTime) {
		try {
			mutex.acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		h = newTime / 10000;
		newTime = newTime - h*10000;
		m = newTime / 100;
		newTime = newTime - m*100;
		s = newTime;
		mutex.release();
	}
	
	public void updateDisplayTime() {
		s ++;
		if (s > 59){
			s = 0;
			m++;
		}
		if (m > 59){
			m = 0;
			h++;
		}
		if (h > 23){
			h = 0;
			m = 0;
			s = 0;
		}
	}
	
/*
	private long convertToMilli(int time) {
		String s = Integer.toString(time);
		long millis = 0
		for (int i = 0; i < s.length(); i++){
			int nbr = 
			if(i<2) {
				millis += s.charAt(i)
			}
		    char c = s.charAt(i);        
		    //Process char
		}
	}
*/
	public long getAlarmTime() {
		return alarmTime;
	}
	
	public void setAlarmTime(long newAlarmTime) {
		try {
			mutex.acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		alarmTime = newAlarmTime;
		mutex.release();
	}
	
	public boolean getAlarmOn() {
		return alarmOn;
	}
	
	public void setAlarmOn() {
		out.setAlarmIndicator(true);
		alarmOn = true;
	}
	
	public void setAlarmOff() {
		out.setAlarmIndicator(false);
		count = 0;
		alarmOn = false;
	}

	public void tic() {
		try {
			mutex.acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		long now = System.currentTimeMillis();
		//System.out.println(now);
		updateDisplayTime();
		
		currentTime =  getDisplayTime();
		alarmTime = getAlarmTime();
		
		//System.out.println(currentTime);
		out.displayTime(currentTime);
		checkAlarm();
		mutex.release();
		
	}
	public void checkAlarm() {
		if (alarmOn & ((currentTime==alarmTime) || (0 < count & count<20))) {
			out.alarm();
			count ++;
		}

		if (alarmOn & count == 20)  {
				setAlarmOff();
				count = 0;
		}
		
	}
	
}
